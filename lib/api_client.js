// Generated by CoffeeScript 1.5.0
(function() {
  var ApiClient, config_dir, default_config, each, extend, fs, request, url, util, _ref;

  fs = require('fs');

  config_dir = process.cwd() + "/config";

  if (!fs.existsSync(config_dir)) {
    fs.mkdirSync(config_dir);
  } else if (!fs.statSync(config_dir).isDirectory()) {
    raise("" + config_dir + " must be a directory, not a regular file");
  }

  url = require('url');

  default_config = require('config');

  util = require('util');

  request = require('request');

  _ref = require('underscore'), extend = _ref.extend, each = _ref.each;

  ApiClient = (function() {

    ApiClient.create = function(name) {
      var clazz, endpoint_config;
      if (this.config == null) {
        throw new Error("ApiClient not configured");
      }
      endpoint_config = this.config.endpoints[name];
      clazz = ApiClient;
      if (endpoint_config.type) {
        clazz = this.types[endpoint_config.type];
      }
      return new clazz(endpoint_config);
    };

    ApiClient.default_config = default_config;

    ApiClient.default_request_options = {
      timeout: 2000
    };

    ApiClient.types = {
      'ApiClient': ApiClient
    };

    ApiClient.load = function(config, dirname) {
      var files;
      if (dirname == null) {
        dirname = __dirname;
      }
      this.config = config || this.default_config;
      files = fs.readdir(dirname);
      return each(files, function(file) {
        var full_path;
        full_path = "" + dirname + "/" + file;
        return require(full_path);
      });
    };

    ApiClient.register = function(label, clazz, clazz_name, endpoint_config) {
      var _base;
      this.types || (this.types = {});
      this.types[clazz_name] = clazz;
      this.config || (this.config = {});
      (_base = this.config).endpoints || (_base.endpoints = {});
      return this.config.endpoints[label] = endpoint_config;
    };

    function ApiClient(options) {
      this.host = options.host;
      this.port = options.port;
      this.options = options.options || {};
      if (this.options.protocol && this.options.protocol === 'https') {
        this.port || (this.port = 443);
      } else {
        this.port || (this.port = 80);
      }
      this.request_options = extend(this.default_request_options, options.request_options);
    }

    ApiClient.prototype.api_path = function() {
      return this.options.base_path || "/";
    };

    ApiClient.prototype.url_config = function(params) {
      if (params == null) {
        params = {};
      }
      return {
        hostname: this.host,
        port: this.port,
        pathname: this.api_path(),
        protocol: this.options.protocol || 'http',
        query: params
      };
    };

    ApiClient.prototype.url = function(params) {
      if (params == null) {
        params = {};
      }
      return url.format(this.url_config(params));
    };

    ApiClient.prototype.get = function(params, headers, cb) {
      var request_opts;
      if (cb == null) {
        cb = void 0;
      }
      request_opts = {
        uri: this.url(params),
        headers: headers,
        method: 'GET'
      };
      if (this.request_options != null) {
        extend(request_opts, this.request_options);
      }
      if (cb) {
        request_opts.callback = cb;
      }
      if (this.options.username && this.options.password) {
        extend(request_opts, {
          user: this.options.username,
          pass: this.options.password
        });
      }
      return this.request(request_opts);
    };

    ApiClient.prototype.request = request;

    return ApiClient;

  })();

  module.exports = ApiClient;

}).call(this);
